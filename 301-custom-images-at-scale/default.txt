#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and http://varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "10.0.1.6";
    .port = "80";
}
sub vcl_recv {
set req.http.Surrogate-Capability = "abc=ESI/1.0";

if (req.restarts == 0) {
    if (req.http.x-forwarded-for) {
        set req.http.X-Forwarded-For =
        req.http.X-Forwarded-For + ", " + client.ip;
    } else {
        set req.http.X-Forwarded-For = client.ip;
    }
}

if (req.method  != "GET" &&
    req.method  != "HEAD" &&
    req.method  != "PUT" &&
    req.method  != "POST" &&
    req.method  != "TRACE" &&
    req.method  != "OPTIONS" &&
    req.method  != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
if (req.http.Authorization || req.http.Authenticate)
{
  return (pass);
}

if (req.method  != "GET" && req.method  != "HEAD") {
    /* We only deal with GET and HEAD by default */
    return (pass);
}

return (hash);

}

sub vcl_hash {
    ### these 2 entries are the default ones used for vcl. Below we add our own.
    hash_data(req.url);
    hash_data(req.http.host);

    if( req.http.Cookie ~ "language" ) {
        hash_data(regsub( req.http.Cookie, "^.*?language=([^;]*);*.*$", "\1" ));
    }

    return (lookup);
}

sub vcl_backend_response {

    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-cookie headers
    # and other mistakes your backend does.
        if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }
        unset beresp.http.Vary;
    return(deliver);
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
}