<?php

namespace Braineet\DataBundle\Listener;

use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Security\Core\SecurityContext;
use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
use User\UserBundle\Entity\User;

class DoctrineExtensionListener implements ContainerAwareInterface
{
    /**
    * @var ContainerInterface
    */
    protected $container;

    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    public function onLateKernelRequest(GetResponseEvent $event)
    {
        $translatable = $this->container->get('gedmo.listener.translatable');
        /** @var SecurityContext $securityContext */
        $securityContext = $this->container->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        $user = 'anon.';
        if ($securityContext->getToken()) {
            /** @var User $user */
            $user = $securityContext->getToken()->getUser();
        }
        if ($user !== null && $user !== 'anon.') {
            $lang = $user->getLanguage();
        }
        else if ($event->getRequest()->headers->get('language') !== null) {
            $lang = $event->getRequest()->headers->get('language');
        } else {
            $lang = $event->getRequest()->getLocale();
        }
        $translatable->setTranslatableLocale($lang);
    }

    public function onKernelRequest(GetResponseEvent $event)
    {
        $securityContext = $this->container->get('security.context', ContainerInterface::NULL_ON_INVALID_REFERENCE);
        if (null !== $securityContext && null !== $securityContext->getToken() && $securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
            $loggable = $this->container->get('gedmo.listener.loggable');
            $loggable->setUsername($securityContext->getToken()->getUsername());
        }
        $request = $event->getRequest();
        $user = 'anon.';
        if ($securityContext->getToken()) {
            /** @var User $user */
            $user = $securityContext->getToken()->getUser();
        }
        if ($user !== null && $user !== 'anon.') {
            $lang = $user->getLanguage();
        }
        else if ($event->getRequest()->headers->get('language') !== null) {
            $lang = $event->getRequest()->headers->get('language');
        } else {
            $lang = $event->getRequest()->getLocale();
        }
        $request->setLocale($lang);

        $versionAndFormat = $event->getRequest()->getRequestUri();
        if (preg_match('/data\/v([0-9\.]+)/', $versionAndFormat, $matches)) {
            $version = $matches[1];
            $request->headers->set('version', $version);
        }
    }
    /**
     * Apply the header rules if the request matches.
     *
     * @param FilterResponseEvent $event
     */
    public function onKernelResponse(FilterResponseEvent $event)
    {
        $response = $event->getResponse();

        $response->headers->set('Cache-Control', "max-age=0,private,s-maxage=0,no-cache");
    }
}